apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.jakewharton.butterknife'

apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.likethesalad.stem'

apply from: "${project.rootProject.file('common_function.gradle')}"


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    viewBinding {
        enabled = true
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
        multiDexEnabled true
        ndk {
            
            abiFilters 'arm64-v8a'
            
            
        }

        
        
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility rootProject.ext.android.javaVersion
        targetCompatibility rootProject.ext.android.javaVersion
    }

    sourceSets {
        main {
            res.srcDirs = rootProject.ext.srcDirs
            jniLibs.srcDirs = rootProject.ext.jniLibs
        }
    }

    signingConfigs {
        test {
            storeFile file(System.properties['testkeyStore'])
            storePassword System.properties['testkeyStorePassword']
            keyAlias System.properties['testkeyAlias']
            keyPassword System.properties['testkeyStorePassword']
        }

        online {
            storeFile file(System.properties['onlinekeyStore'])
            storePassword System.properties['onlinekeyStorePassword']
            keyAlias System.properties['onlinekeyAlias']
            keyPassword System.properties['onlinekeyStorePassword']
        }

        fmc {
            storeFile file(System.properties['fmckeyStore'])
            storePassword System.properties['fmckeyStorePassword']
            keyAlias System.properties['fmckeyAlias']
            keyPassword System.properties['fmckeyStorePassword']
        }

    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"
            
            buildConfigField "boolean", "ENABLE_STRICT_MODE_LOGS", "false"

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.test

        }
        debug {
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"
            
            buildConfigField "boolean", "ENABLE_STRICT_MODE_LOGS", "false"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.test
        }
        
        gradle.taskGraph.whenReady {
            tasks.each {
                if (it.name.contains("GoogleServices")) {
                    it.enabled = false
                }
            }
        }

        
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                
                
                
                
                
                if ("release".equals(variant.buildType.name)) {
                    outputFileName = "${rootProject.ext.constant.SCHEME}_${variant.productFlavors.name}_[${getPinYinName(rootProject.ext.android.app_name)}]_release_v${rootProject.ext.android.versionName}.apk"
                } else {
                    outputFileName = "${rootProject.ext.constant.SCHEME}_${variant.productFlavors.name}_[${getPinYinName(rootProject.ext.android.app_name)}]_debug_v${rootProject.ext.android.versionName}.apk"
                }
            }
        }


    }

    flavorDimensions "store"
    productFlavors {
        
        develop {
            dimension "store"
            description "，test"
            signingConfig signingConfigs.test
            isDefault = true


            resValue "bool", "isGplay", "false"
            buildConfigField "boolean", "ALLOW_FCM_USE", "false"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"F\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"FDroid\""
        }
        
        online {
            dimension "store"
            applicationId getRApplicationId()
            signingConfig signingConfigs.online
            description ",，online"


            resValue "bool", "isGplay", "false"
            buildConfigField "boolean", "ALLOW_FCM_USE", "false"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"F\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"FDroid\""
        }

        
        gplay {
            apply plugin: 'com.google.gms.google-services'

            dimension "store"
            signingConfig signingConfigs.online
            description ""


            resValue "bool", "isGplay", "true"
            buildConfigField "boolean", "ALLOW_FCM_USE", "true"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"G\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"GooglePlay\""
        }
    }
    
    variantFilter { variant ->
        def names = variant.flavors*.name
        
        if (names.contains("gplay")) {
            
            setIgnore(true)
        }
    }

}

repositories {
    flatDir {
        dirs '../libs'
    }
    google()
}


configurations { all { exclude module: 'httpclient' exclude module: 'commons-logging' } }
dependencies {

    testImplementation 'junit:junit:4.12'
    
    implementation "com.google.dagger:hilt-android:2.40.5"
    kapt "com.google.dagger:hilt-compiler:2.40.5"
    
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    api project(':vector')
    api project(':openlauncher')

    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation project(':wallet')
    implementation project(':common')

    implementation rootProject.ext.libsVersion.lib_support_v4
    implementation rootProject.ext.libsVersion.lib_recyclerview_v7
    implementation rootProject.ext.libsVersion.greendao_generator
    implementation rootProject.ext.libsVersion.greendao
    implementation rootProject.ext.libsVersion.logger
    implementation rootProject.ext.libsVersion.rxandroid
    implementation rootProject.ext.libsVersion.rxjava
    implementation rootProject.ext.libsVersion.butterknife
    implementation rootProject.ext.libsVersion.gson
    implementation rootProject.ext.libsVersion.retrofit
    implementation rootProject.ext.libsVersion.ptr_refersh
    implementation rootProject.ext.libsVersion.stetho
    implementation rootProject.ext.libsVersion.stetho_okhttp3
    implementation rootProject.ext.libsVersion.retrofitConverterGson
    implementation rootProject.ext.libsVersion.retrofitAdapterRxJava
    implementation rootProject.ext.libsVersion.tiny
    implementation rootProject.ext.libsVersion.okHttpLoggingInterceptor
    testImplementation rootProject.ext.testDependencies.robolectric
    implementation rootProject.ext.libsVersion.multidex


    kapt rootProject.ext.libsVersion.butterknife_compiler

    implementation(rootProject.ext.libsVersion.recovery) {
        exclude group: 'com.android.support'
    }

    implementation 'com.cocosw:bottomsheet:1.3.0'
    implementation 'com.zhihu.android:matisse:0.4.3'
    implementation 'com.takwolf.android:hf-recyclerview:0.1.0'
    implementation 'com.pnikosis:materialish-progress:1.7'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.24'

    testImplementation 'junit:junit:4.12'


    
    implementation 'im.dlg:android-dialer:1.2.5'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation libs.airbnb.mavericks
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'


    implementation(files("../libs/chat-sdk.aar"))
    implementation(files("../libs/wallet-core-3.0.2.aar"))

    
    implementation 'com.github.tapadoo:alerter:7.2.4'
    implementation 'com.tencent.bugly:crashreport:4.1.9.2'
    implementation 'com.github.eleme.UETool:uetool:1.3.4'
    implementation 'com.github.eleme.UETool:uetool-base:1.3.4'
    implementation 'com.github.penfeizhou.android.animation:apng:2.26.0'

    
    implementation 'androidx.room:room-runtime:2.0.0'
    kapt 'androidx.room:room-compiler:2.0.0'  
    implementation 'androidx.room:room-rxjava2:2.0.0'
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.4.0")
}

